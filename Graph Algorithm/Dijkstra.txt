문제
Contents
 음의 가중치가 없는 단방향 그래프와 시작점과 도착점이 주어졌을 때, 시작점에서 도착점까지의 가장 최단 거리를 구하는 여러 알고리즘 중에 Dijkstra's Algorithm이 있다. 알고리즘의 의사 코드는 다음과 같다.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
Dijkstra(G, r)
{
   S = empty; //S는 정점 집합
   for each u ∈V
      d[u] = INF
   d[r] = 0
   while(S!=V){
      u = extractMin(V-S, d); ---(1)
      for each v ∈ Adj(u)
         if(v ∈ V-S and d[u] + w(u, v) < d[v]){
            d[v] = d[u] + w(u, v);
            prev[v] = u;
         }
   }
   return d[t];   
}
 위 Dijkstra 알고리즘을 구현하고, 조건에 맞게 출력하시오. 

※ 이완 조건(Relaxation condition)은 d[u] + w(u, v) < d[v]로 한다.

 

Input
입력의 첫줄은 n과 m이 들어온다. n은 노드의 수이고 노드는 1부터 n까지 있다. m은 간선의 수를 나타낸다.

다음 m 줄에는 간선(x, y, w)이 들어온다. x는 시작점 y는 도착점 w는 그 간선의 가중치를 나타낸다.

마지막 줄에는 출발 노드 r와 도착 노드 t가 들어 온다. 

Output
1부터 n까지 prev값을 순서대로 출력하고 마지막에, r에서 t까지의 최단 거리(Shortest path's distance)를 출력한다. 각 숫자는 빈칸으로 분리되어야 한다.

만일 r에서 t까지 이르는 경로가 없다면 Impossible을 최단 거리 대신 출력한다.

Sample Input 1
8 14
1 2 8
1 4 9
1 3 11
2 5 10
3 6 8
3 7 8
4 2 6
4 3 3
4 5 1
5 8 2
6 7 7
7 4 12
7 8 5
8 6 4
1 7
Sample Output 1
0 1 1 1 4 8 3 5 19

 

Sample Input 2
8 14
1 2 8
1 4 9
1 3 11
2 5 10
3 6 8
3 7 8
4 2 6
4 3 3
4 5 1
5 8 2
6 7 7
7 4 12
7 8 5
8 6 4
8 1
Sample Output 2
0 4 4 7 4 8 6 0 Impossible

답안
#include <iostream>

using namespace std;

int Vertax_Array[101];
int Vertax_Bool_Array[101];
int Edge_Array[101][101];
int Prev[101];

void Dijkstra(int start_vertax, int vertax_number);
int ExtractMin(int vertax_number);

int main()
{
	int vertax_number, edge_number;
	int vertax_01, vertax_02, weight;
	int start_vertax, end_vertax;

	for (int i = 0; i < 101; i++)
	{
		Vertax_Array[i] = 10000;
	}

	for (int i = 0; i < 101; i++)
	{
		for (int j = 0; j < 101; j++)
		{
			Edge_Array[i][j] = -1;
		}
	}

	cin >> vertax_number >> edge_number;

	for (int i = 0; i < edge_number; i++)
	{
		cin >> vertax_01 >> vertax_02 >> weight;
		Edge_Array[vertax_01][vertax_02] = weight;
		Vertax_Bool_Array[vertax_01] = -1;
		Vertax_Bool_Array[vertax_02] = -1;
	}

	cin >> start_vertax >> end_vertax;

	Dijkstra(start_vertax, vertax_number);

	for (int i = 1; i <= vertax_number; i++)
	{
		cout << Prev[i] << " ";
	}

	if (Vertax_Array[end_vertax] == 10000)
	{
		cout << "Impossible" << endl;
	}
	else
	{
		cout << Vertax_Array[end_vertax] << endl;
	}

	system("pause");
	return 0;
}

void Dijkstra(int start_vertax, int vertax_number)
{
	Vertax_Array[start_vertax] = 0;
	for (int i = 1; i <= vertax_number; i++)
	{
		int vertax = ExtractMin(vertax_number);
		Vertax_Bool_Array[vertax] = 1;
		for (int j = 1; j <= vertax_number; j++)
		{
			if (Edge_Array[vertax][j] != -1)
			{
				if (Vertax_Bool_Array[j] == -1 && Vertax_Array[vertax] + Edge_Array[vertax][j] < Vertax_Array[j])
				{
					Vertax_Array[j] = 0;
					Vertax_Array[j] = Vertax_Array[vertax] + Edge_Array[vertax][j];
					Prev[j] = vertax;
				}
			}
		}
	}
}

int ExtractMin(int vertax_number)
{
	int smallest_vertax_value = 100000;
	int smallest_vertax;
	for (int i = 1; i <= vertax_number; i++)
	{
		if (Vertax_Bool_Array[i] == -1 && smallest_vertax_value > Vertax_Array[i])
		{
			smallest_vertax_value = Vertax_Array[i];
			smallest_vertax = i;
		}
	}
	return smallest_vertax;
}