문제
Contents
  다음은 MST를 구하기 위한 여러 알고리즘 중 하나인 Kruskal's Algorithm의 의사코드이다. 

 

1
2
3
4
5
6
7
8
9
10
11
MST-KRUSKAL(G, w)
A = empty set
for each vertex v ∈ G.V
   MAKE-SET(v)
sort the edges of G.E into nondecreasing order by weight w
for each edge (u, v) ∈ G.E, taken in nondecreasing order by weight
   if FIND-SET(u) != FIND-SET(v)
      total = total + w(u, v) --- (1)
      A = A ∪ {(u, v)}
      UNION(u, v)
return A
  위 의사 코드를 구현하고, 조건에 맞게 출력하시오.

 

Input
입력의 첫줄에는 노드의 수(n)과 간선의 정보 수(m)이 들어온다. 노드는 1부터 n까지 있다.

다음 m줄에는 간선을 이루는 노드(x, y)와 그 간선의 가중치 w가 들어온다.

 

Output
(1) 에서 w(u,v)들을 출력하고, 마지막에 MST의 총 가중치의 합을 출력한다. 각 숫자는 빈 칸으로 분리 되어야 한다.

Sample Input
4 5
1 2 3
1 4 1
2 3 4
2 4 2
3 4 5
Sample Output
1 2 4 7

답안
#include <iostream>
 
using namespace std;
 
int Array[21][21] = { 0 };
int P[20];
 
void Kruskal(int vertax_number, int edge_number);
void Make_Set(int x);
void Union(int x, int y);
int Find_Set(int x);
 
int main()
{
    int vertax_number, edge_number;
    int vertax_01, vertax_02, weight;
 
    cin >> vertax_number >> edge_number;
 
    for (int i = 0; i < edge_number; i++)
    {
        cin >> vertax_01 >> vertax_02 >> weight;
        Array[vertax_01][vertax_02] = weight;
        Array[vertax_02][vertax_01] = weight;
        Make_Set(vertax_01);
        Make_Set(vertax_02);
    }
 
    Kruskal(vertax_number, edge_number);
 
    /*system("pause");*/
    return 0;
}
 
void Kruskal(int vertax_number, int edge_number)
{
    int total = 0;
    for(int k = 0; k < edge_number; k++)
    {
        int weight_min = 1000;
        int weight_vertax_01, weight_vertax_02;
        for (int i = 1; i <= 20; i++)
        {
            for (int j = 1; j <= 20; j++)
            {
                if (Array[i][j] != 0 && weight_min > Array[i][j])
                {
                    weight_min = Array[i][j];
                    weight_vertax_01 = i;
                    weight_vertax_02 = j;
                }
            }
        }
        if (Find_Set(weight_vertax_01) != Find_Set(weight_vertax_02))
        {
            total += weight_min;
            cout << weight_min << " ";
            Union(weight_vertax_01, weight_vertax_02);
        }
        Array[weight_vertax_01][weight_vertax_02] = 0;
        Array[weight_vertax_02][weight_vertax_01] = 0;
    }
    cout << total << endl;
}
 
void Make_Set(int x)
{
    P[x] = x;
}
 
void Union(int x, int y)
{
    P[Find_Set(y)] = Find_Set(x);
}
 
int Find_Set(int x)
{
    if (x == P[x])
    {
        return x;
    }
    else
    {
        return Find_Set(P[x]);
    }
}