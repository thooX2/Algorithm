문제
Contents
  두 개의 문자열이 입력으로 들어 온다. 두 번째로 들어오는 문자열이 패턴이고 첫 번째로 입력받은 문자열에서 해당 패턴을 찾는 것이 이번 문제이다. 

  패턴을 찾는 방법에는 여러 방법이 있지만, 그 중에서 가장 구현하기 쉬운 방법으로 이번 문제를 해결해보자. 알고리즘은 다음과 같다. 

1
2
3
4
5
6
7
8
naiveMatching(A, P)
{
   //n is length of A, m is length of P.
   //P is pattern string.
   for i = 1 to n-m+1
      if(P[1..m] = A[i..i+m-1]) ---- (1)
      then A[i] 자리에서 매칭이 발견되었음을 알린다.
}
 

다른 알고리즘과 위 알고리즘을 구별하기 위해서 (1)에서 비교 횟수를 카운팅한다.

* 비교회수에 대한 내용

P[1..m]과 A[i...i+m-1]의 각각의 원소를 비교하기 위해서는 적어도 m번 비교한다. 그런데 비교 도중 중간에 일치하지 않은 문자가 있을 경우 비교를 m번까지 하지 않고 그 자리에서 바로 넘어갈 수 있다.  만일 반복 횟수 3번째에서 불일치가 발생하면 3까지만 세고 다음으로 넘어간다. 

1
2
3
4
5
6
7
8
isMatching()
{
   for m번의 반복{
      // < 이부분에서 counting 하면 된다.
      if(P[j] != A[k]) return false;
   }
   return true;
}
 

Input
두 개의 문자열이 들어온다. 첫 번째 문자열은 원본 문자열, 두 번째 문자열은 패턴 문자열이다. 패턴 문자열의 길이는 원본 문자열의 길이보다 작다. 원본 문자열의 최대 길이는 1000자를 넘지 않는다.

Output
비교 횟수를 출력하고 패턴 개수를 출력한다. 각 숫자는 빈 칸으로 구분 되어야 한다.

Sample Input
boboycatsoaropt
soar
Sample Output
15 1

답안
#include <iostream>
#include <string>
 
using namespace std;
 
int count_ = 0;
int pattern_count_ = 0;
 
void NaiveMatching(string string_01, string string_02);
bool IsMatching(string string_01, string string_02, int check_num);
 
int main()
{
    string string_01, string_02;
    cin >> string_01 >> string_02;
 
    NaiveMatching(string_01, string_02);
 
    cout << count_ << " " << pattern_count_ << endl;
 
    /*system("pause");*/
    return 0;
}
 
void NaiveMatching(string string_01, string string_02)
{
    for (int i = 0; i < (int)(string_01.length()) - (int)(string_02.length()) + 1; i++)
    {
        IsMatching(string_01, string_02, i);
    }
}
 
bool IsMatching(string string_01, string string_02, int check_num)
{
    for (int j = 0; j < (int)(string_02.length()); j++)
    {
        count_++;
        if (string_01.at(check_num + j) != string_02.at(j))
        {
            return false;
        }
    }
    pattern_count_++;
    return true;
}