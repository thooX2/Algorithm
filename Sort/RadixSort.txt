문제
Contents
O(nlogn) 알고리즘을 어느 정도 공부한 빌게이츠는 O(n)에 정렬을 할 수 없는지 궁리하기 시작했다. 그런데 아무리 생각해도 다른 방법을 생각 할 수 없었다. 그러던 어느날 빌게이츠는 7호관 뒷마당 땅을 파다가 고대 문서를 발견했다. 고대 문서에는 다음과 같은 정렬법이 써있었다. 

1
2
3
4
5
6
7
8
radixSort(A[], n, k){
//원소들이 각각 최대 k 자리수인 A[1..n]을 정렬한다.
//가장 낮은 자리수를 1번째 자리수라 함
   for i<-1 to k
      //i 번째 자리수에 대해 A[1..n]을 안정성을 유지하면서 O(n)안에 정렬한다.
      ....내용 훼손
       
}
빌게이츠는 자리수라는 아이디어에 O(n)에 정렬 할 수 있겠구나 생각을 했다. 그러나 훼손된 문서로는 완벽한 구현이 힘들었다.  그래서 빌게이츠는 학원 선생님을 찾아 갔다. 학원 선생님이 알려준 구체적인 방법은 다음과 같다.

1
2
3
4
5
6
7
8
9
10
11
12
radixSort(A[], n, k){
   queue que[10]; //que[0..9]
 
   for i<-1 to k
      for j<-1 to n
         d <- digit(A[j], i) //A[j]의 i번째 자리의 수
         enque( que[d], A[j] );
      p<-1;
      for j<-0 to 9
         while( que[j] is not empty )
            A[p++] = deque(que[j]);
}
빌게이츠는 자신의 눈을 의심하지 않을 수가 없었다. 그래서 디버깅을 하기로 했다. 여러분이 해야 하는 일은 위와 같은 방식으로 radixSort를 구현 했을 때, 정렬이 진행되다 자릿수 t에 대해 정렬한 후 그 단계에서 배열을 출력하는 것이다. 

 

Input
첫 줄에는 정렬해야 하는 원소의 개수 n(1<=n<=10000)와 디버깅을 위한 자릿수 t가 들어온다.

그 다음 줄에는 n개의 임의의 정수가 들어 온다. 

여기서는 각 입력별 최대 자릿수(k)는 주어지지 않는다. 입력에 따라 계산을 해야 한다.

 

Output
radixSort를 진행하다가, 자릿수 t에 대해서 정렬 한 뒤 그 단계에서 배열을 출력한다. 

출력 할 때 원소 사이에는 빈칸이 들어가야 한다. 

 

Sample Input
10 1

0 7 1 6 7 7 6 6 5 4 
 

Sample Output
0 1 4 5 6 6 6 7 7 7

답안
#include <iostream>
#include <queue>
 
using namespace std;
 
int Array[10001];
 
void RadixSort(int Array[], int number, int k);
int Digit(int num, int dgt);
 
int main()
{
    int number, k;
    cin >> number >> k;
    for (int i = 1; i <= number; i++)
    {
        cin >> Array[i];
    }
    RadixSort(Array, number, k);
    for (int i = 1; i <= number; i++)
    {
        cout << Array[i] << " ";
    }
    cout << endl;
 
    //system("pause");
    return 0;
}
 
void RadixSort(int Array[], int number, int k)
{
    queue<int> que[10];
    for (int i = 1; i <= k; i++)
    {
        for (int j = 1; j <= number; j++)
        {
            int d = Digit(Array[j], i);
            que[d].push(Array[j]);
        }
        int p = 1;
        for (int j = 0; j <= 9; j++)
        {
            while (!que[j].empty())
            {
                Array[p++] = que[j].front();
                que[j].pop();
            }
        }
    }
}
 
int Digit(int number, int digit)
{
    int Digit_Array[10];
    int div = 10;
    for (int i = 0; i < 10; i++)
    {
        Digit_Array[i] = number % 10;
        number = number / 10;
    }
    return Digit_Array[digit -1];
}